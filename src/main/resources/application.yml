##spring:
##  datasource:
##    url: jdbc:mysql://localhost:3306/shoppingMall?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
##    username: shop
##    password: 85947ads
##    driver-class-name: com.mysql.cj.jdbc.Driver
##
##  jpa:
##    hibernate:
##      ddl-auto: update
##    show-sql: true
##    properties:
##      hibernate:
##        format_sql: true
##
##  sql:
##    init:
##      mode: always
##
##server:
##  port: 8080
##spring:
##  datasource:
##    url: jdbc:h2:tcp://localhost/~/authservice
##    username: sa
##    password:
##    driver-class-name: org.h2.Driver
##
##  jpa:
##    hibernate:
##      ddl-auto: create
##    properties:
##      hibernate:
##        format_sql: true
##
##  jwt:
##    secret: 9f8ac09ef0137c73ee8b6d722d85c8ee56359b2e9a08976193dcd7aca5b6a91b
##
##  security:
##    oauth2:
##      client:
##        registration:
##          google:
##            client-id: # 발급 받은 client-id #
##            client-secret: # 발급 받은 client-secret #
##            scope: # 필요한 권한 #
##          kakao:
##            client-id: # 발급 받은 client-id #
##            client-secret: # 발급 받은 client-secret #
##            scope: # 필요한 권한 #
##            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
##            authorization-grant-type: authorization_code
##            client-name: kakao
##            client-authentication-method: POST
##
##        provider:
##          kakao:
##            authorization-uri: https://kauth.kakao.com/oauth/authorize
##            token-uri: https://kauth.kakao.com/oauth/token
##            user-info-uri: https://kapi.kakao.com/v2/user/me
##            user-name-attribute: id
#server:
#  port: 8080
#  servlet:
#    context-path: /
#    encoding:
#      charset: UTF-8
#      enabled: true
#      force: true
#
#spring:
#  datasource:
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    url: jdbc:mysql://localhost:3306/security?serverTimezone=Asia/Seoul
#    username: cos
#    password: cos1234
#  jpa:
#    hibernate:
#      ddl-auto: create #create update none
#      naming:
#        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
#    show-sql: true
#
#  security:
#    oauth2:
#      client:
#        registration:
#          google: # /oauth2/authorization/google 이 주소를 동작하게 한다.
#            client-id: 머시기
#            client-secret: 머시기
#            scope:
#            - email
#            - profile
#
#          facebook:
#            client-id: 머시기
#            client-secret: 머시기
#            scope:
#            - email
#            - public_profile
#
#          # 네이버는 OAuth2.0 공식 지원대상이 아니라서 provider 설정이 필요하다.
#          # 요청주소도 다르고, 응답 데이터도 다르기 때문이다.
#          naver:
#            client-id: 머시기
#            client-secret: 머시기
#            scope:
#            - name
#            - email
#            - profile_image
#            client-name: Naver # 클라이언트 네임은 구글 페이스북도 대문자로 시작하더라.
#            authorization-grant-type: authorization_code
#            redirect-uri: http://localhost:8080/login/oauth2/code/naver
#
#        provider:
#          naver:
#            authorization-uri: https://nid.naver.com/oauth2.0/authorize
#            token-uri: https://nid.naver.com/oauth2.0/token
#            user-info-uri: https://openapi.naver.com/v1/nid/me
#            user-name-attribute: response # 회원정보를 json의 response 키값으로 리턴해줌.
